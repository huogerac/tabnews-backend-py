## Validate it at: https://apitools.dev/swagger-parser/online/

openapi: 3.0.2

info:
  version: 0.1.0
  title: Tabnews (side project) API Backend
  description: API and database for auth, users and news
  contact:
    name: Roger
    email: roger@na-inter.net
    url: https://roger.na-inter.net

servers:
  - url: http://127.0.0.1:5000
    description: Local

paths:
  /api/version:
    get:
      operationId: api.api_version
      summary: Returns the API version
      tags:
        - Status
      responses:
        200:
          description: Success

  /api/auth/login:
    post:
      operationId: api.auth.login
      summary: User login to get a JWT Token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: john@doe.com
                password:
                  type: string
                  example: "@bC1234"
      responses:
        200:
          description: JWT Access Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  token:
                    type: string
                    example: Encripted.JWT.Token
                  refresh_token:
                    type: string
                    example: Another.Encripted.JWT.Token.With.Long.Expiration
        400:
          description: Bad request. You must send an email and password
        401:
          description: Email or password is not valid

  /api/tabnews:
    get:
      operationId: api.tabnews.list_tabnews
      summary: Returns the latest tabnews
      tags:
        - Tabnews

      responses:
        200:
          description: Success

    post:
      operationId: api.tabnews.create_tabnews
      summary: Create a new Tabnews
      tags:
        - Tabnews
      security:
        - jwtAuth: [tabnews:create]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - title
              properties:
                title:
                  type: string
                  example: 101 facts that prove the Earth is flat
                  minLength: 12
                description:
                  type: string
                  example: Despite being a maiority, in absolute terms, few people know the real truth...

      responses:
        201:
          description: Tabnews created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tabnews"
        400:
          description: Invalid data to create a Tabnews
        401:
          description: Not Authorized

components:
  securitySchemes:
    jwtAuth:
      type: oauth2
      x-tokenInfoFunc: services.token.check_token_info
      flows:
        authorizationCode:
          tokenUrl: "url"
          authorizationUrl: "url"

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@doe.com

    Author:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        avatar:
          type: string
          example: http://example.com/img/avatar/jose_thumb.png
          nullable: true

    Tabnews:
      type: object
      properties:
        id:
          type: integer
          example: 42
        title:
          type: string
          example: Python is a great option for backend and APIs
        description:
          type: string
          nullable: true
        author:
          $ref: "#/components/schemas/Author"
        created_at:
          type: string
          format: date-time
          example: 2021-01-11T11:32:28Z
